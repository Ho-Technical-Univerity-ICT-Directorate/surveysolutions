@using WB.Core.SharedKernels.Questionnaire.Documents
@using WB.UI.Shared.Web.Extensions
@model WB.Core.SharedKernels.SurveyManagement.Web.Controllers.GeographyPreview

@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Area</title>
    @*@this.GenerateFavicon(Url.Content("~/Dependencies/img/identity/favicon-hq"))*@

    <style>
        html, body, #viewDiv {
            padding: 0;
            margin: 0;
            height: 100%;
            width: 100%;
        }
    </style>
    @if (Model != null)
    {
    <link rel="stylesheet" href="https://js.arcgis.com/4.3/esri/css/main.css">
    <script src="https://js.arcgis.com/4.7/"></script>
    <script>
        require([
            "esri/Map",
            "esri/views/MapView",
            "esri/Graphic",
            "esri/geometry/Polygon",
            "esri/geometry/Point",
            "esri/geometry/Multipoint",
            "esri/geometry/Polyline",
            "esri/symbols/SimpleLineSymbol",
            "esri/symbols/SimpleFillSymbol",
            "dojo/domReady!"
        ],
            function (Map, MapView, Graphic, Polygon, Point, Multipoint, Polyline, SimpleLineSymbol, SimpleFillSymbol) {
                var map = new Map({
                    basemap: "hybrid"
                });

                function getPolyGraphic(geometryJson, isNeighbour) {

                    @switch (Model.Geometry)
                    {
                        case GeometryType.Multipoint:
                            <text>
                            var polyline = Polyline.fromJSON(geometryJson); 
                            var polyGeometry = new Multipoint();
                            for (var i = 0; i < polyline.paths[0].length; i++) { //>//it is for razor to end compare char
                                polyGeometry.addPoint(polyline.getPoint(0, i));
                            };
                            polyGeometry.spatialReference = polyline.spatialReference;
                            var markerType = 'simple-marker';
                            </text>
                            break;
                        case GeometryType.Polyline:
                            <text>
                            var polyGeometry = Polyline.fromJSON(geometryJson); 
                            var markerType = 'simple-line';
                            </text>
                            break;
                        case GeometryType.Point:
                            <text>
                            var polyGeometry = Point.fromJSON(geometryJson); 
                            var markerType = 'simple-marker';
                            </text>
                            break;
                        default:
                            <text>
                            var polyGeometry = Polygon.fromJSON(geometryJson); 
                            var markerType = 'simple-line';
                            </text>
                            break;
                    }
    
                    var fillSymbol = {
                        type: markerType,
                        color: isNeighbour ? [255, 238, 0] : [255, 255, 255],
                        width: 1
                    };
                    
                    var polyGraphic = new Graphic({
                        geometry: polyGeometry,
                        symbol: fillSymbol
                    });

                    return polyGraphic;
                }
                
                var geometryJson = @Html.Raw(Model.AreaAnswer.Geometry);
                var polyGraphic = getPolyGraphic(geometryJson, false)
                
                var areas = [polyGraphic]
                
                @foreach (var neighbour in Model.Neighboring)
                {
                    <text>
                    var neighbourGeometryJson = @Html.Raw(neighbour.Geometry);
                    var neighbourPolyGraphic = getPolyGraphic(neighbourGeometryJson, true);
                    areas.push(neighbourPolyGraphic);
                    </text>
                }
                
                var view = new MapView({
                    container: "viewDiv",
                    map: map,
                    spatialReference: polyGraphic.geometry.spatialReference
                });

                view.graphics.addMany(areas);

                var taxLotExtent = view.graphics.items[0].geometry;

                if (taxLotExtent.extent !== null && taxLotExtent.extent !== undefined)
                    view.extent = taxLotExtent.extent;
                else {
                    view.center = taxLotExtent;
                    view.scale = 24000;
                };
            });
    </script>
    }
</head>
<body>
    <div id="viewDiv"></div>
</body>
</html>
