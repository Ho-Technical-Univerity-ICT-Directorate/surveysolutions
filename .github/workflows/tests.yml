name: tests

on:
  workflow_call:
    inputs:
      runs_on:
        description: 'What image to run'
        default: 'ubuntu-latest'
        required: false
        type: string
      run_analysis:
        description: 'Run SonarQube analysis'
        default: false
        required: false
        type: boolean
    secrets:
      sonar-token:
        description: 'Token to upload scan results to sonarcloud.io'
        required: true

  workflow_dispatch:
    inputs:
      runs_on:
        description: 'What image to run'
        default: 'ubuntu-latest'
        required: false
        type: string
      run_analysis:
        description: 'Run SonarQube analysis'
        default: false
        required: false
        type: boolean

jobs:
  prepare:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      info_version: ${{ steps.version.outputs.info_version }}

    steps:
      - name: prepare version variables
        id: version
        run: |
          ver=$(cat ./src/.version | awk -F. '{printf "%s.%02d.%d\n", $1, $2, $3}')
          echo ::set-output name=version::$ver.${{ github.run_number }}
          echo "::set-output name=info_version::$ver (build ${{ github.run_number }})"

  unit-web:
    runs-on: ${{ inputs.runs_on }}${{ github.event.inputs.runs_on }}
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
      - name: Headquarters unit tests
        run: |
          dotnet test src/Tests/WB.Tests.Unit \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - name: Headquarters web tests
        run: |
          dotnet test src/Tests/WB.Tests.Web \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - name: Designer unit tests
        run: |
          dotnet test src/Tests/WB.Tests.Unit.Designer \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - name: Test coverage artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-coverage
          retention-days: 1
          path: |
            src/Tests/WB.Tests.Unit/TestResults/**/*.xml
            src/Tests/WB.Tests.Web/TestResults/**/*.xml
            src/Tests/WB.Tests.Unit.Designer/TestResults/**/*.xml

  integration:
    runs-on: ${{ inputs.runs_on }}${{ github.event.inputs.runs_on }}
    strategy:
      fail-fast: false

    services:
      postgres:
        image: postgres:13.1
        env:
          POSTGRES_PASSWORD: P@$$w0rd
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
 
    steps:
      - uses: actions/checkout@v2
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
      - name: Headquarters tests
        run: |
          dotnet test src/Tests/WB.Tests.Integration \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - name: Designer tests
        run: |
          dotnet test src/Tests/WB.Tests.Integration.Designer \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - name: Test coverage artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-coverage
          retention-days: 1
          path: |
            src/Tests/WB.Tests.Integration/TestResults/**/*.xml
            src/Tests/WB.Tests.Integration.Designer/TestResults/**/*.xml

  code-analysis:
    if: |
      (
      github.event_name == 'pull_request' || 
      github.ref == 'refs/heads/master' ||
      github.ref == 'refs/heads/rc' ||
      github.ref == 'refs/heads/release'
      ) && inputs.run_analysis
    needs: [unit-web, integration]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: setup sonar scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - uses: actions/download-artifact@v2
        id: test-results
        with:
          name: test-coverage
          path: test-results

      - name: build with scan
        run: |
          dotnet sonarscanner begin \
            /k:"surveysolutions_surveysolutions" \
            /o:"surveysolutions" \
            /v:"$(cat ./src/.version)" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="${{ secrets.sonar-token }}" \
            /d:sonar.exclusions="**/migrations/**" \
            /d:sonar.cs.opencover.reportsPaths="${{ steps.test-results.outputs.download-path }}/**/*.xml"
          dotnet build './src/WB without Xamarin.sln'
          dotnet sonarscanner end /d:sonar.login="${{ secrets.sonar-token }}"

  code-analysis-js:
    if: |
      (
      github.event_name == 'pull_request' || 
      github.ref == 'refs/heads/master' ||
      github.ref == 'refs/heads/rc' ||
      github.ref == 'refs/heads/release'
      ) && inputs.run_analysis
    needs: [prepare]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.organization=surveysolutions
            -Dsonar.projectKey=surveysolutions_frontend
            -Dsonar.projectVersion="${{ needs.prepare.outputs.version }}"
            -Dsonar.sourceEncoding=UTF-8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.sonar-token }}